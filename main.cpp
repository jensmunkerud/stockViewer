#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <NTPClient.h> 
#include <WiFiUdp.h>
#include <ArduinoJson.h>
#include <map>
using namespace std;

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET		 -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display (SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
const char* ssid = "SSID";
const char* password = "PASS";
int stockDisplayTime = 5000;
string tickers[4] = {"TSLA", "NVDA", "AAPL", "MSFT"};

// NTP server details
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 7200;  // Adjust to your time zone (e.g., UTC+1)
WiFiUDP udp;
NTPClient timeClient(udp, ntpServer, gmtOffset_sec, 60000);  // Update every 60 seconds

// Create a new WiFi client
WiFiClient client;
HTTPClient http;

// The links has to be const for http get requests to work, idealy get around this so the finnhub link can be dynamic
std::map<string, const String> tickerURL = {{"AAPL" , "https://finnhub.io/api/v1/quote/?symbol=AAPL&token=YOURTOKENHERE"},
											{"TSLA", "https://finnhub.io/api/v1/quote/?symbol=TSLA&token=YOURTOKENHERE"},
											{"MSFT", "https://finnhub.io/api/v1/quote/?symbol=MSFT&token=YOURTOKENHERE"},
											{"NVDA", "https://finnhub.io/api/v1/quote/?symbol=NVDA&token=YOURTOKENHERE"}
											};


// Nordnet logo 128x64px WHITE
const unsigned char flashLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc1, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x80, 0x00, 0x06, 0x00, 0x00, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x80, 0x00, 0x06, 0x00, 0x00, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x86, 0x02, 0x36, 0x08, 0x18, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x9f, 0x3e, 0x7e, 0xfe, 0x7d, 0xf8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0xbf, 0xbf, 0xfe, 0xfe, 0x7f, 0xf8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0xb1, 0xb9, 0xce, 0xe6, 0xc6, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xb1, 0xf9, 0xc6, 0xc6, 0xe7, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xb0, 0xf9, 0x86, 0xc6, 0xff, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xb0, 0xf1, 0x86, 0xc6, 0xfe, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0xb1, 0xf1, 0xc6, 0xc6, 0xc0, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0xb9, 0xb0, 0xce, 0xc6, 0xe6, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x9f, 0xb8, 0xfe, 0xc6, 0x7e, 0x78, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x9f, 0x30, 0x7e, 0xc6, 0x3c, 0x78, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

string getCurrentTime() {
	timeClient.update();
	return (to_string(timeClient.getHours()) + ":" + (timeClient.getMinutes() < 10 ? "0" + to_string(timeClient.getMinutes()) : to_string(timeClient.getMinutes())));
}

void printCenter(const String buf, int x, int y)			//Function to centre the current price in the display width
{
	int16_t x1, y1;
	uint16_t w, h;
	display.getTextBounds(buf, x, y, &x1, &y1, &w, &h);		//Calculate string width
	display.setCursor((x - w / 2) + (128 / 2), y);			//Set cursor to print string in centre
	display.print(buf);										//Display string
}

void displayStock(string ticker, string price, string time) {
	display.clearDisplay();								 //Clear the OLED display
	display.setTextSize(2);
	printCenter(price.c_str(), 0, 20);
	display.setTextSize(1);
	printCenter(ticker.c_str(), 0, 0);
	printCenter(time.c_str(), 48, 0);
	// display.setCursor(0, 54);
	// display.print(("hi: " + data.hi).c_str());
	// display.setCursor(20, 54);
	// display.print(("lo: " + data.lo).c_str());
	// display.setCursor(30, 54);
	// display.print(("change: " + data.change + "%").c_str());
	display.display();
}

string fetchData(string ticker) {
	http.begin(tickerURL[ticker]);
	int httpCode = http.GET();
	StaticJsonDocument<2000> doc;
	DeserializationError error = deserializeJson(doc, http.getString());
 
	if (error)
	{
		return "error";
	}
	http.end();
	string price = doc["c"].as<string>();
	// string hi = doc["h"].as<string>();
	// string lo = doc["l"].as<string>();
	// string change = doc["dp"].as<string>();

	return price;
}

void setup() 
{
	if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))	
	{
		for (;;); // Don't proceed, loop forever
	}
 
	WiFi.begin(ssid, password);
	display.clearDisplay();									 //Clear the display
	display.setTextColor(SSD1306_WHITE);					//Set the text colour to white
	display.drawBitmap(0, 0, flashLogo, 128, 64, WHITE);	//Display bitmap from array
	display.display();
	delay(2000);
 
	display.clearDisplay();					 //Clear the display
	display.setTextSize(1);					 //Set display parameters
	display.println("Connecting to WiFi...");
	display.display();
 
	// Connecting to WIFI
	while (WiFi.status() != WL_CONNECTED)					//Connect to the WiFi network
	{
		delay(500);
	}
 
	display.println("Connected to: ");			 //Display message once connected
	display.print(ssid);
	display.display();
	delay(1000);
	display.clearDisplay();
	display.display();

	// Initilizes timeclient
	timeClient.begin();
	timeClient.setTimeOffset(gmtOffset_sec);
}


void loop() 
{
	for (string ticker : tickers) {
		displayStock(ticker, fetchData(ticker), getCurrentTime());
		delay(stockDisplayTime);
	}
	esp_sleep_enable_timer_wakeup(900000000);			 //Sleep for 15 minutes
}
